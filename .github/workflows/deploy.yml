#!/bin/bash
PROJECT_ID=$(gcloud config get-value project)
VM_NAME="odoo18-$(date +%Y%m%d-%H%M%S)"
ZONE="southamerica-east1-a"  # São Paulo

cat > /tmp/startup-odoo18-final.sh << 'STARTUP_SCRIPT'
#!/bin/bash
exec > /var/log/startup-script.log 2>&1
set -e

echo "🚀 Instalando Odoo 18 - Versión Final..."

# Sistema
apt-get update -qq
apt-get install -y postgresql postgresql-contrib git python3-pip python3-dev python3-venv \
python3-wheel build-essential wget nano libxml2-dev libxslt1-dev libldap2-dev \
libsasl2-dev libtiff5-dev libjpeg8-dev libopenjp2-7-dev zlib1g-dev libfreetype6-dev \
liblcms2-dev libwebp-dev libharfbuzz-dev libfribidi-dev libxcb1-dev libpq-dev \
libssl-dev libffi-dev python3-cffi libzip-dev gcc

# wkhtmltopdf
cd /tmp
wget -q https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6.1-2/wkhtmltox_0.12.6.1-2.jammy_amd64.deb
dpkg -i wkhtmltox_0.12.6.1-2.jammy_amd64.deb || apt-get install -f -y
rm wkhtmltox_0.12.6.1-2.jammy_amd64.deb

# PostgreSQL y usuario
systemctl start postgresql
adduser --system --home=/opt/odoo --group odoo
sudo -u postgres createuser -s odoo 2>/dev/null || true
sudo -u postgres createdb -O odoo odoo

# Odoo
git clone --depth 1 --branch 18.0 https://github.com/odoo/odoo /opt/odoo
chown -R odoo:odoo /opt/odoo

# Python
sudo -u odoo python3 -m venv /opt/odoo/venv
sudo -u odoo /opt/odoo/venv/bin/pip install --upgrade pip wheel setuptools

# Dependencias críticas
sudo -u odoo /opt/odoo/venv/bin/pip install \
psycopg2-binary babel lxml lxml_html_clean pyOpenSSL \
cryptography greenlet==2.0.2 gevent==22.10.2

# Resto de dependencias
sudo -u odoo /opt/odoo/venv/bin/pip install \
rjsmin geoip2 chardet python-stdnum decorator docutils \
freezegun html2text Jinja2 libsass MarkupSafe num2words \
ofxparse passlib Pillow polib psutil pydot pyparsing \
PyPDF2 pyserial python-dateutil python-ldap pytz pyusb \
qrcode reportlab requests vobject Werkzeug xlrd xlsxwriter \
xlwt zeep

sudo -u odoo /opt/odoo/venv/bin/pip install -r /opt/odoo/requirements.txt || true

# Configuración
mkdir -p /etc/odoo /var/log/odoo /var/lib/odoo
chown odoo:odoo /var/log/odoo /var/lib/odoo

cat > /etc/odoo/odoo.conf << EOF
[options]
admin_passwd = admin
db_host = False
db_port = False
db_user = odoo
db_password = False
addons_path = /opt/odoo/addons
xmlrpc_port = 8069
proxy_mode = True
list_db = False
geoip_database = False
logfile = /var/log/odoo/odoo.log
log_level = info
data_dir = /var/lib/odoo
EOF

chown odoo:odoo /etc/odoo/odoo.conf
chmod 640 /etc/odoo/odoo.conf

# Servicio
cat > /etc/systemd/system/odoo.service << EOF
[Unit]
Description=Odoo18
After=network.target postgresql.service

[Service]
Type=simple
User=odoo
Group=odoo
ExecStart=/opt/odoo/venv/bin/python3 /opt/odoo/odoo-bin -c /etc/odoo/odoo.conf
StandardOutput=journal+console
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF

# Inicializar BD
cd /tmp
sudo -u odoo /opt/odoo/venv/bin/python3 /opt/odoo/odoo-bin \
-c /etc/odoo/odoo.conf -d odoo -i base --stop-after-init

# CRÍTICO: Establecer contraseña usando shell
echo "🔑 Configurando contraseña admin..."
sudo -u odoo /opt/odoo/venv/bin/python3 /opt/odoo/odoo-bin shell -d odoo -c /etc/odoo/odoo.conf --no-http << 'PYTHON_SCRIPT'
admin = env['res.users'].browse(2)
admin.password = 'admin'
env.cr.commit()
exit()
PYTHON_SCRIPT

# Iniciar servicio
systemctl daemon-reload
systemctl enable odoo
systemctl start odoo

echo "✅ Instalación completada!"
echo "Usuario: admin / Contraseña: admin"
STARTUP_SCRIPT

# Firewall
gcloud compute firewall-rules create allow-odoo-8069 \
  --allow tcp:8069 \
  --source-ranges 0.0.0.0/0 \
  --target-tags odoo-server \
  --quiet 2>/dev/null || echo "Firewall OK"

# Crear VM
gcloud compute instances create $VM_NAME \
  --zone=$ZONE \
  --machine-type=e2-micro \
  --network-interface=network-tier=PREMIUM,subnet=default \
  --metadata-from-file startup-script=/tmp/startup-odoo18-final.sh \
  --create-disk=auto-delete=yes,boot=yes,device-name=$VM_NAME,image=projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20241218,mode=rw,size=20,type=pd-standard \
  --tags=odoo-server

sleep 5
EXTERNAL_IP=$(gcloud compute instances describe $VM_NAME --zone=$ZONE --format='get(networkInterfaces[0].accessConfigs[0].natIP)')

echo "✅ VM: $VM_NAME"
echo "📍 Zona: $ZONE"
echo "🌐 IP: $EXTERNAL_IP"
echo "⏳ Esperar 10 min"
echo ""
echo "🔗 http://$EXTERNAL_IP:8069"
echo "👤 admin / 🔑 admin"
echo ""
echo "SSH: gcloud compute ssh $VM_NAME --zone=$ZONE"
echo "Logs: gcloud compute ssh $VM_NAME --zone=$ZONE --command='sudo tail -f /var/log/startup-script.log'"
